String.prototype.replaceAll = function(b, a) {
    return this.replace(new RegExp(b, "g"), a)
};
String.prototype.replaceAllIgnoreCase = function(b, a) {
    return this.replace(new RegExp(b, "ig"), a)
};
String.prototype.contains = function(a) {
    return a && this.indexOf(a) !== -1
};
String.prototype.startsWith = function(a) {
    return a !== null && a.length <= this.length && this.substring(0, a.length) === a
};
String.prototype.endsWith = function(a) {
    return a !== null && a.length <= this.length && this.substring(this.length - a.length, a.length) === a
};
String.prototype.equalsIgnoreCase = function(a) {
    return a && a.length <= this.length && this.toLowerCase() === a.toLowerCase()
};
String.prototype.containsIgnoreCase = function(a) {
    return (a && this.toLowerCase().indexOf(a.toLowerCase()) !== -1)
};

function AjaxRequest(b) {
    var a;
    if (window.XMLHttpRequest) {
        a = new XMLHttpRequest()
    } else {
        a = new ActiveXObject()
    }
    b.onsuccess = b.onsuccess || function(c) {};
    b.onfailure = b.onfailure || function(c) {};
    b.connectMethod = b.connectMethod || "POST";
    AjaxRequest.prototype.connect = function(c, e, d) {
        if (typeof c !== "string") {
            return
        }
        if (typeof e !== "string") {
            return
        }
        if (typeof d !== "boolean") {
            return
        }
        if (d) {
            a.onreadystatechange = function() {
                if (a.readyState === 4) {
                    if (a.status === 200) {
                        b.onsuccess(a)
                    } else {
                        b.onfailure(a)
                    }
                    $("#csrfToken").attr("token", a.getResponseHeader("CSRF"))
                }
            }
        }
        a.open(b.connectMethod, c, d);
        a.setRequestHeader("Content-type", "application/x-www-form-urlencoded;charset=utf-8");
        a.setRequestHeader("CSRF", $("#csrfToken").attr("token"));
        a.send(e);
        if (!d) {
            b.onsuccess(a)
        }
    }
}

function LWT() {
    this.ComponentFactory = {
        BASECONTAINER: 0,
        BUTTON: 1,
        CHECKBOX: 2,
        COMBOBOX: 3,
        DATE_FIELD: 4,
        FILE_UPLOAD: 5,
        FORM: 6,
        IFRAME: 7,
        IMAGE: 8,
        ITERATOR: 9,
        LABEL: 10,
        LINK: 11,
        PANEL: 12,
        RADIO: 13,
        RATING: 14,
        TABLE: 15,
        TABLEHEADER: 16,
        TEXTFIELD: 17,
        TEXTAREA: 18,
        TREE: 19,
        BUTTONITEM: 20,
        TABLE_LAYOUT: 21,
        TABLE_LAYOUT_ROW: 22,
        TABLE_LAYOUT_CELL: 23
    };
    this.LSWT_DEFAULTS = {
        LSWT_JS_DIR: "./lwt/js/",
        LSWT_IMG_DIR: "./lwt/images/",
        LSWT_CSS: "./lwt/LWT.css",
        SUGGESTIONFIELD_TIMER: 0
    };
    this.BROWSER = {
        isIE: (navigator.appName === "Microsoft Internet Explorer"),
        isCHROME: (navigator.userAgent.toLowerCase().indexOf("chrome") !== -1),
        isFIREFOX: (navigator.userAgent.toLowerCase().indexOf("firefox") !== -1),
        isOPERA: (navigator.appName === "Opera" || navigator.userAgent.indexOf("Opera") !== -1)
    };
    this.BROWSER.ver = this.BROWSER.isIE ? navigator.userAgent.substring(navigator.userAgent.indexOf("MSIE") + 5, navigator.userAgent.indexOf(";", navigator.userAgent.indexOf("MSIE"))) : this.BROWSER.isFIREFOX ? navigator.userAgent.substr(navigator.userAgent.indexOf("Firefox") + 8) : navigator.userAgent.substring(navigator.userAgent.indexOf("Chrome") + 7, navigator.userAgent.indexOf("Safari") - 1);
    this.StickyStates = {
        STUCK: "stuck",
        UNSTUCK: "unstuck"
    };
    this.customEvents = {
        tabPanel: {
            switchUl: "switchUl.lswt.tabPanel"
        },
        suggestionField: {
            resultClicked: "resultClicked.lswt.suggestionField",
            tagCreated: "tagCreated.lswt.suggestionField",
            tagRemoved: "tagRemoved.lswt.suggestionField",
            beforeTagCreation: "beforeTagCreation.lswt.suggestionField",
            beforeTagRemoval: "beforeTagRemoval.lswt.suggestionField",
            timerStarted: "timerStarted.lswt.suggestionField",
            timerExpierd: "timerExpired.lswt.suggestionField",
            callBack: "callBack.lswt.suggestionField",
            focusLost: "focusLost.lswt.suggestionField",
            afterTagCreation: "afterTagCreation.lswt.suggestionField"
        },
        dateField: {
            invalidDate: "invalidDate.lswt.suggestionField",
            validDate: "validDate.lswt.suggestionField"
        }
    };
    LWT.prototype.say = function() {
        b({
            canResize: true,
            canDrag: true,
            isModal: false,
            showHeader: true,
            className: "alert",
            bodyHTML: "<div onmousedown='cancelEvent(event)'><input type='text'></div>"
        })
    };
    this.dateField = {
        picker_icon: this.LSWT_DEFAULTS.LSWT_IMG_DIR + "/picker/date_picker.png"
    };

    function b(g) {
        var f, e, i, h, d, c;
        g = $.extend({
            canResize: true,
            canDrag: true,
            isModal: true,
            showHeader: true,
            doAutoCenter: true,
            minWidth: 200,
            minHeight: 200,
            maxWidth: 500,
            maxHeight: 500,
            className: "dialog",
            bodyHTML: ""
        }, g);
        f = document.createElement("div");
        f.style.cssText = "position:absolute;left:0;top:0;height:100%;width:100%";
        $(f).attr({
            "class": "mask",
            cellpadding: 0,
            cellspacing: 0
        });
        e = document.createElement("div");
        i = document.createElement("div");
        h = document.createElement("div");
        e.style.cssText = "position:absolute;overflow:visible;";
        i.style.cssText = "position:relative;overflow:visible;width:100%";
        h.style.cssText = "position:relative;cursor:" + (g.canDrag ? "move" : "default") + ";width:100%;" + (g.showHeader ? "" : "display:none");
        e.className = g.className;
        i.className = g.className + "Body";
        h.className = g.className + "Header";
        $(e).append("<div style='position:relative;display:table;width:100%;height:100%'></div>").children().append(h).append($(i).append(g.bodyHTML));
        if (g.canResize) {
            d = a(g);
            e.style.cssText = "position:relative;overflow:visible;width:100%;height:100%;";
            $(d.tb).css({
                minWidth: g.minWidth,
                minHeight: g.minHeight,
                maxWidth: g.maxWidth,
                maxHeight: g.maxHeight
            });
            $(d.td).append(e)
        }
        c = $(g.canResize ? d.tb : e).css("cursor", (g.showHeader ? "inherit" : "move")).get(0);
        $("body").append(g.isModal ? $(f).append(c) : c);
        if (g.canDrag) {
            $(c).Drags({
                opacity: 1,
                handler: g.showHeader ? $(h) : $(c),
                onMove: function(j) {
                    j.data.dragData.handler.css("cursor", "move")
                },
                onDrop: function(j) {
                    j.data.dragData.handler.css("cursor", "move")
                }
            })
        }
        return {
            mask: f,
            dialog: e
        }
    }

    function a(c) {
        var f = document.createElement("table"),
            e, d, g;
        $(f).attr({
            "class": c.className + "-resizeBar",
            cellpadding: 0,
            cellspacing: 0,
            style: "position:absolute;padding:0;"
        });
        $(f).append("<colgroup><col width=\"2px\" /><col width='100%'/><col width=\"2px\" /><tr><td  height='2px' style='cursor:NW-RESIZE'></td><td height='2px' style='cursor:N-RESIZE'></td><td  height='2px' style='cursor:NE-RESIZE'></td></tr><tr height='100%'><td  height='*' style='cursor:W-RESIZE;min-width:2px'></td><td   height='100%' valign='top'></td><td  height='*' style='cursor:E-RESIZE;min-width:2px'></td></tr><tr><td height='2px' style='cursor:SW-RESIZE'></td><td height='2px' style='cursor:S-RESIZE'></td><td height='2px' style='cursor:SE-RESIZE'></td></tr>");
        e = $(f.children[1].children).children();
        d = e.splice(4, 1);
        g = {
            onDrop: function(i) {
                var h = i.data.dragData;
                $(window._LSWT.BROWSER.isIE ? "body" : window).unbind("mouseup", h.onDrop).unbind("mousemove", h.onMove).css("cursor", "default")
            },
            onMove: function(l) {
                var i = $(l.data.tb),
                    k, j, h, n, m;
                k = {
                    w: (l.data.cursor.contains("w-") ? -1 : 1),
                    h: ((l.data.cursor.startsWith("nw-") || l.data.cursor.startsWith("n-") || l.data.cursor.startsWith("ne-")) ? -1 : 1)
                };
                j = {
                    w: i.width() + k.w * (l.pageX - l.data.pos.left),
                    h: i.height() + k.h * (l.pageY - l.data.pos.top)
                };
                h = $(i.get(0)).position();
                n = l.data.minDim;
                m = l.data.maxDim;
                switch (l.data.cursor.toUpperCase()) {
                    case "NW-RESIZE":
                        if (j.w >= n.w && j.w <= m.w) {
                            i.css("left", (h.left + (l.pageX - l.data.pos.left)) + "px")
                        }
                    case "NE-RESIZE":
                        if (j.w >= n.w && j.w <= m.w) {
                            i.width(j.w);
                            l.data.pos.left = l.pageX
                        }
                    case "N-RESIZE":
                        if (j.h >= n.h && j.h <= m.h) {
                            i.css("top", (h.top + (l.pageY - l.data.pos.top)) + "px");
                            i.height(j.h);
                            l.data.pos.top = l.pageY
                        }
                        break;
                    case "W-RESIZE":
                        if (j.w >= n.w && j.w <= m.w) {
                            i.css("left", (h.left + (l.pageX - l.data.pos.left)) + "px")
                        }
                    case "E-RESIZE":
                        if (j.w >= n.w && j.w <= m.w) {
                            l.data.pos.left = l.pageX;
                            i.width(j.w)
                        }
                        break;
                    case "SW-RESIZE":
                        if (j.w >= n.w && j.w <= m.w) {
                            i.css("left", (h.left + (l.pageX - l.data.pos.left)) + "px")
                        }
                    case "SE-RESIZE":
                        if (j.w >= n.w && j.w <= m.w) {
                            l.data.pos.left = l.pageX;
                            i.width(j.w)
                        }
                    case "S-RESIZE":
                        if (j.h >= n.h && j.h <= m.h) {
                            i.height(j.h);
                            l.data.pos.top = l.pageY
                        }
                        break
                }
            }
        };
        e.bind("mousedown dragstart onselectstart", {
            dragData: g,
            resizeDiv: f,
            mainTd: d
        }, function(h) {
            var k, j, i;
            if (h.type === "onselectstart" || h.type === "dragstart") {
                cancelEvent(h);
                return false
            }
            if (h.which === 1) {
                k = {
                    left: h.pageX,
                    top: h.pageY
                };
                j = {
                    w: parseInt(h.data.resizeDiv.style.minWidth, 10),
                    h: parseInt(h.data.resizeDiv.style.minHeight, 10)
                };
                i = {
                    w: parseInt(h.data.resizeDiv.style.maxWidth, 10),
                    h: parseInt(h.data.resizeDiv.style.maxHeight, 10)
                };
                $(window._LSWT.BROWSER.isIE ? "body" : window).bind("mouseup", {
                    dragData: g
                }, g.onDrop).bind("mousemove", {
                    dragData: g,
                    pos: k,
                    minDim: j,
                    maxDim: i,
                    mainTd: h.data.mainTd,
                    cursor: this.style.cursor,
                    tb: h.data.resizeDiv
                }, g.onMove).css("cursor", this.style.cursor)
            }
            return true
        });
        return {
            tb: f,
            td: d
        }
    }
}

function ChangeList() {
    var a = {},
        b = {};
    ChangeList.prototype.add = function(f, c, d) {
        var e;
        if (f) {
            e = a[f] || {};
            if (c) {
                if (d === b[f][c]) {
                    a[f][c] = undefined
                } else {
                    e[c] = d
                }
            }
            a[f] = e
        }
    };
    ChangeList.prototype.addOldValue = function(f, c, d) {
        var e;
        if (f) {
            e = b[f] || {};
            if (c) {
                e[c] = d
            }
            b[f] = e
        }
    };
    ChangeList.prototype.addAll = function(f, e) {
        var d, c;
        if (f) {
            d = a[f] || {};
            if (e) {
                for (c in e) {
                    if (e.hasOwnProperty(c)) {
                        d[c] = e[c]
                    }
                }
            }
            a[f] = d
        }
    };
    ChangeList.prototype.get = function(c) {
        return a[c]
    };
    ChangeList.prototype.getOldValue = function(c) {
        return b[c]
    };
    ChangeList.prototype.getAsRequestString = function() {
        return JSON.stringify(a)
    };
    ChangeList.prototype.getAsRequestStringAndClear = function() {
        var c = JSON.stringify(a);
        this.clear();
        initChangeList();
        return c
    };
    ChangeList.prototype.remove = function(c) {
        if (c) {
            delete a[c]
        }
    };
    ChangeList.prototype.clear = function() {
        a = {}
    };
    ChangeList.prototype.isEmpty = function() {
        var c;
        for (c in a) {
            if (a.hasOwnProperty(c)) {
                return false
            }
        }
        return true
    }
}

function initChangeList() {
    var b;
    _LSWT.changeList = new ChangeList();
    b = $("body").find("[useChangeList='true']");
    b.each(function() {
        var c = parseInt(this.getAttribute("_componentType"), 10);
        a(this, c, _LSWT.changeList.addOldValue);
        if (c === 14) {
            $(this).bind("click", function() {
                a(this, c, _LSWT.changeList.add)
            })
        } else {
            $(this).bind("change", function() {
                a(this, c, _LSWT.changeList.add)
            })
        }
    });

    function a(d, f, g) {
        var e, c;
        switch (f) {
            case 2:
                g(d.id, "checked", d.checked);
                break;
            case 3:
                g(d.id, "selectedIndex", d.children[0].selectedIndex);
                break;
            case 4:
                g(d.id, "value", d.value);
                break;
            case 13:
                c = $(d).find("input");
                for (e = 0; e < c.length; e++) {
                    if (c[e].checked) {
                        g(d.id, "checked", c[e].getAttribute("value"));
                        break
                    }
                }
                g(d.id, "checked", undefined);
                break;
            case 14:
                g(d.id, "rating", d.children[0].getAttribute("_currentrating"));
                break;
            case 17:
                g(d.id, "value", d.value);
                break;
            case 18:
                g(d.id, "value", d.value);
                break;
            default:
                break
        }
    }
}
LWT.prototype.getDataFromComponent = function(a, b) {
    if (a.dataset) {
        this.getDataFromComponent = function(c, d) {
            var e = d.contains("-") ? convertToCamelCase(d) : d.toLowerCase();
            return c.dataset[e]
        }
    } else {
        this.getDataFromComponent = function(c, d) {
            return c.getAttribute("data-" + d.toLowerCase())
        }
    }
    return this.getDataFromComponent(a, b)
};

function convertToCamelCase(b) {
    var a = /-(\w)/g;
    b = b.replace(a, function(c, d) {
        return d.toUpperCase()
    });
    return b
}
LWT.prototype.dataManager = function() {
    var a;

    function b() {
        var e = {};

        function d(f) {
            if (f.hasOwnProperty("dataSourceId") && !e[f.dataSourceId]) {
                e[f.dataSourceId] = f.values
            }
        }

        function c(g) {
            var f = typeof g === "string" ? g : _LSWT.getDataFromComponent(g, "dataSourceId");
            return e[f]
        }
        return {
            storeValues: d,
            getStoredValue: c
        }
    }
    return {
        getInstance: function() {
            if (!a) {
                a = b()
            }
            return a
        }
    }
};
(function() {
    var a;
    window._LSWT = new LWT();
    initChangeList();
    a = _LSWT.dataManager().getInstance();
    _LSWT.storeValues = a.storeValues;
    _LSWT.getStoredValue = a.getStoredValue
}());

function cancelEvent(a) {
    a = a || window.event;
    if (a.stopPropagation) {
        window.cancelEvent = function(b) {
            b.stopPropagation()
        }
    } else {
        window.cancelEvent = function(b) {
            b.cancelBubble = true
        }
    }
    window.cancelEvent(a)
}

function deepCopy(b, d) {
    var a;
    d = d || {};
    for (a in b) {
        if (typeof b[a] === "object") {
            d[a] = (b[a].constructor === Array) ? [] : {};
            deepCopy(b[a], d[a])
        } else {
            d[a] = b[a]
        }
    }
    return d
}

function fetchQueryStringParams() {
    var e = location.search,
        a, c = /(^\?)|(?:([^=&]*)=([^&]*)(&|$))/g,
        d;
    a = e.replace(c, function() {
        var g, j, h, i, f;
        j = arguments[1];
        h = arguments[2];
        i = arguments[3];
        f = arguments[4];
        if (j === "?") {
            return "{"
        }
        return '"' + h + '":"' + i + '"' + (f === "&" ? ", " : "}")
    });
    if (a) {
        try {
            d = JSON.parse(a);
            return d
        } catch (b) {}
    }
    return undefined
}

function ObservableList() {
    this.observerList = []
}
ObservableList.prototype.add = function(a) {
    return this.observerList.push(a)
};
ObservableList.prototype.empty = function() {
    this.observerList = []
};
ObservableList.prototype.count = function() {
    return this.observerList.length
};
ObservableList.prototype.get = function(a) {
    if (a > -1 && a < this.observerList.length) {
        return this.observerList[a]
    }
};
ObservableList.prototype.insert = function(b, a) {
    var c = -1;
    if (a === 0) {
        this.observerList.unshift(b);
        c = a
    } else {
        if (a === this.observerList.length) {
            this.observerList.push(b);
            c = a
        }
    }
    return c
};
ObservableList.prototype.indexOf = function(b, d) {
    var a = d,
        c = -1;
    while (a < this.observerList.length) {
        if (this.observerList[a] === b) {
            c = a
        }
        a++
    }
    return c
};

function ScrollSubject() {
    this.observers = new ObservableList()
}
ScrollSubject.prototype.addObserver = function(a) {
    this.observers.add(a)
};
ScrollSubject.prototype.notify = function(b) {
    var c, a;
    if (b) {
        c = b.modifiedObservers.length;
        for (a = 0; a < c; a++) {
            if (b.modifiedObservers[a].state === _LSWT.StickyStates.STUCK) {
                b.modifiedObservers[a].update.call(b.modifiedObservers[a].comp)
            } else {
                if (b.modifiedObservers[a].state === _LSWT.StickyStates.UNSTUCK) {
                    b.modifiedObservers[a].revert.call(b.modifiedObservers[a].comp)
                }
            }
        }
    }
};
ScrollSubject.prototype.addNewObservers = function(c) {
    var d = this,
        b, e, a;
    b = c.selector || "";
    e = c.updateFunction || undefined;
    a = c.revertFunction || undefined;
    if (c.clearOldList) {
        d.observers.empty()
    }
    $(b).each(function() {
        var f = $.extend(new ScrollObserver(), {
            comp: this
        });
        f.update = e;
        f.revert = a;
        d.addObserver(f)
    });
    if ($(b).length > 0) {
        d.bindEventHandler()
    }
};
ScrollSubject.prototype.bindEventHandler = function() {
    var a = this;

    function b() {
        var c = [];
        $(a.observers.observerList).each(function() {
            var d = this.calcStickyState(window.pageYOffset);
            if (d) {
                if (this.state !== d) {
                    this.state = d;
                    c.push(this)
                }
            }
        });
        a.notify({
            modifiedObservers: c
        })
    }
    $(window).bind("scroll", b);
    b()
};

function ScrollObserver() {
    this.state = _LSWT.StickyStates.UNSTUCK;
    this.update = function() {};
    this.revert = function() {}
}
ScrollObserver.prototype.calcStickyState = function(f) {
    function b(g) {
        if (g) {
            g = g.replace("px", "");
            if (g.contains("%")) {
                return undefined
            }
        }
        return g
    }
    var e = this,
        a, d, c;
    if (e.comp) {
        a = e.comp;
        d = _LSWT.getDataFromComponent(a, "startstickyy");
        c = _LSWT.getDataFromComponent(a, "endstickyy");
        d = b(d);
        if (d) {
            if (f < d) {
                return _LSWT.StickyStates.UNSTUCK
            }
            c = b(c);
            if (c) {
                return f < c ? _LSWT.StickyStates.STUCK : _LSWT.StickyStates.UNSTUCK
            }
            return _LSWT.StickyStates.STUCK
        }
        c = b(c);
        if (c) {
            return f < c ? _LSWT.StickyStates.STUCK : _LSWT.StickyStates.UNSTUCK
        }
        return undefined
    }
    return undefined
};
$().ready(function() {
    var a;
    if ($("[data-startStickyY], [data-endStickyY]").length > 0) {
        _LSWT.stickyScrollSubject = $.extend({}, new ScrollSubject(), {
            scrollY: window.pageYOffset
        });
        a = {};
        _LSWT.stickyScrollSubject.addNewObservers({
            selector: "[data-startStickyY], [data-endStickyY]",
            updateFunction: function() {
                var c, b;
                if (a[this.id]) {
                    c = a[this.id];
                    $(c).css("visibility", "visible")
                } else {
                    c = $(this).clone(true);
                    a[this.id] = c;
                    $(document.body).append(c);
                    b = $(this).attr("data-offsetY") || 0;
                    $(c).attr("class", this.className + "Sticky");
                    $(c).css("top", parseInt(b, 10))
                }
                this.style.visibility = "hidden"
            },
            revertFunction: function() {
                var b;
                if (a[this.id]) {
                    b = a[this.id]
                }
                $(b).css("visibility", "hidden");
                $(this).css("visibility", "visible")
            },
            clearOldList: true
        })
    }
});
LWT.prototype.changeCssTheme = function(a) {
    var b;
    b = $("<link>");
    b.attr("rel", "stylesheet");
    b.attr("class", "oldTheme");
    b.attr("href", a);
    $(document.body).append(b);
    setTimeout(function() {
        c()
    }, 0);

    function c() {
        var d = $("link.oldTheme")[0];
        if (d) {
            $(d).remove()
        }
    }
};
LWT.prototype.bindScrollEvent = function(a, b) {
    if (a && a.length > 0) {
        $(a).unbind("click.lswt");
        $(a).bind("click.lswt", c)
    }

    function c(i) {
        var h = this,
            e = h.href,
            g = e,
            f, d, k = 0,
            j = b.duration || 1000;
        f = e.indexOf("#");
        if (f > -1) {
            h.href = "javascript:void(0);";
            d = $(e.substring(f));
            k = d && d.offset().top;
            $("html, body").animate({
                scrollTop: k
            }, j, function() {
                h.href = g
            })
        }
        cancelEvent(i)
    }
};
LWT.prototype.openHtmlWindow = function(c, f) {
    var a, d;
    f = (typeof f === "function") ? f : window.alert;
    if (c.replaceUrl) {
        window.location = c.url;
        return
    }
    a = window.open(c.url, (_LSWT.BROWSER.isIE ? "" : c.title), "width=" + c.width + ",height=" + c.height + ",resizable=yes,scrollbars=yes,top=" + c.top + ",left=" + c.left);
    if (a) {
        try {
            $(a.document).ready(function() {
                try {
                    setTimeout(function() {
                        if (!a.closed) {
                            if (a.window.outerHeight < 1) {
                                f("This feature requires you to activate popups. Please allow popups from your browser settings, and relaunch this page from your browser.");
                                return
                            }
                            if (c.printOnLoad === true || c.printOnLoad === "true") {
                                a.print();
                                a.close()
                            }
                        }
                    }, 2000)
                } catch (g) {}
            })
        } catch (b) {}
    } else {
        f("This feature requires you to activate popups. Please allow popups from your browser settings, and relaunch this page from your browser.")
    }
};

function getCSSName(a) {
    var b = /([A-Z])/g;
    return a.replace(b, "-$1").toLowerCase()
}

function getJsName(c) {
    var b = /-(\w)/g,
        a;
    a = {
        "float": "cssFloat"
    };
    return a[c] ? a[c] : c.replace(b, function(d, e) {
        return e.toUpperCase()
    })
}

function style(a, b, c) {
    b = getJsName(b);
    if (typeof c !== "undefined") {
        a.style[b] = c
    }
    return a.style[b]
}

function getColor(e, k) {
    var g, a, b, h = {},
        c = ["red", "green", "blue", "alpha"],
        f = ["hue", "saturation", "lightness", "alpha"],
        j, d;
    g = style(e, k);
    if (g.startsWith("#")) {
        a = new RegExp("([0-9a-f]){" + (g.length - 1) / 3 + "}", "ig");
        j = c
    } else {
        a = /((0?[.]\d*)|(\d{1,3}%?))/ig;
        j = g.startsWith("rgb") ? c : f
    }
    b = g.match(a);
    if (!b) {
        return g
    }
    for (d = 0; d < j.length; d += 1) {
        h[j[d]] = b[d]
    }
    return h
};